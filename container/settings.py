"""
    parlhist/parlhist/settings.py

    SPDX-FileCopyrightText: 2023-2025 Martijn Staal <parlhist [at] martijn-staal.nl>
    SPDX-FileCopyrightText: 2025 Universiteit Leiden <m.a.staal [at] law.leidenuniv.nl>

    SPDX-License-Identifier: EUPL-1.2

    Available under the EUPL-1.2, or, at your option, any later version.

    Django settings for parlhist project.

    Generated by 'django-admin startproject' using Django 4.2.4.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.0/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from os import getenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv("PARLHIST_DJANGO_SECRET_KEY", 'django-insecure-$74)yfs=rkq1596)nf%-+pl9(dqi-xu=5nb=ls6gv&wz#-qzw1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(getenv("PARLHIST_DEBUG", False))

ALLOWED_HOSTS = getenv("PARLHIST_DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(',')


# Application definition

INSTALLED_APPS = [
    'parlhistnl.apps.ParlhistnlConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'parlhist.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'parlhist.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

__database_type = getenv("PARLHIST_DATABASE_TYPE", "sqlite3")

if __database_type == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": getenv("POSTGRES_DATABASE"),
            "USER": getenv("POSTGRES_USER"),
            "PASSWORD": getenv("POSTGRES_PASSWORD"),
            "HOST": getenv("POSTGRES_HOST", "db"),
            "PORT": getenv("POSTGRES_PORT", "5432"),
        }
    }
else:
    # Assume sqlite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "/data/parlhist.db"
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'nl-nl'

TIME_ZONE = 'Europe/Amsterdam'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    "formatters": {
        "verbose": {
            "format": "{levelname} - {asctime} - {processName}.{process:d} - {module}:{lineno:d} - {funcName}: {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': '/data/parlhist.log'
        }
    },
    'root': {
        'handlers': ['console', "file"],
        'level': getenv("PARLHIST_DJANGO_LOG_LEVEL", "DEBUG"),
    },
}

CELERY_BROKER_URL = getenv("CELERY_BROKER_URL", "amqp://rabbitmq")
CELERY_RESULT_BACKEND = getenv("CELERY_RESULT_BACKEND", "rpc://rabbitmq")
CELERY_IMPORTS = [
    "parlhistnl.crawler.handeling",
    "parlhistnl.crawler.kamerstuk",
    "parlhistnl.crawler.staatsblad"
]
# This rate limit is recommended when crawling new pages from the KOOP API.
# If you're rebuilding your database from the memoized requests, you can
# opt for a higher rate limit.
CELERY_TASK_DEFAULT_RATE_LIMIT = getenv("PARLHIST_TASK_RATE_LIMIT", "60/m")

PARLHIST_CRAWLER_MEMOIZE_PATH = getenv("PARLHIST_MEMOIZED_REQUESTS_PATH", "/data/memoized-requests")
PARLHIST_CRAWLER_DEFAULT_USE_MEMOIZATION = getenv("PARLHIST_ENABLE_MEMOIZATION", "False") == "True"

PARLHIST_OPENSEARCH_ENABLED = getenv("PARLHIST_OPENSEARCH_ENABLED", "False") == "True"
PARLHIST_OPENSEARCH_HTTP_AUTH_USER = getenv("PARLHIST_OPENSEARCH_HTTP_AUTH_USER", "admin")
PARLHIST_OPENSEARCH_HTTP_AUTH_PASSWORD = getenv("PARLHIST_OPENSEARCH_HTTP_AUTH_PASSWORD", "changeme")
PARLHIST_OPENSEARCH_HTTP_AUTH = (PARLHIST_OPENSEARCH_HTTP_AUTH_USER, PARLHIST_OPENSEARCH_HTTP_AUTH_PASSWORD)
PARLHIST_OPENSEARCH_HOST = getenv("PARLHIST_OPENSEARCH_HOST", "opensearch-node1")
PARLHIST_OPENSEARCH_HOSTS = [{"host": PARLHIST_OPENSEARCH_HOST, "port": 9200}]
PARLHIST_OPENSEARCH_VERIFY_CERTS = False
